swagger: '2.0'
info:
  version: '0.0.1'
  title: 'Behandlungsjournal'
  description: 'Ein Behandlungsjournal f√ºr kranke Tiere'
  license:
    name: 'MIT'
host: localhost
schemes:
  - 'http'
basePath: '/api'
consumes:
  - application/json
produces:
  - application/json
paths:
 /users:
   get:
     operationId: 'getAllUsers'
     description: 'Returns all users'
     produces:
        - application/json
     tags:
        - 'user'
     responses:
      "200":
       description: 'A list of all users.'
       schema:
        type: 'array'
        items:
         $ref: '#/definitions/User'
      default:
       description: 'Unexpected error'
       schema:
         $ref: '#/definitions/Error'
 /user/{_id}:
    get:
     operationId: 'getUserbyID'
     description: 'Returns user by ID (ObjectID)'
     produces:
        - "application/json"
     parameters:
       - name: _id
         in: path
         required: true
         type: string
         description: "Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
     tags:
        - "user"
     responses:
      "200":
       description: 'Returns user by ID'
       schema:
        type: 'array'
        items:
         $ref: '#/definitions/User'
      default:
       description: 'Unexpected error'
       schema:
        $ref: '#/definitions/Error'
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "_id"
        in: "path"
        description: "Mongodb [ObjectID](https://docs.mongodb.com/v3.2/reference/method/ObjectId/)"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated UserObject"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User updated"
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "Delete User by Id."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "_id"
        in: "path"
        description: "User _id to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "User is deleted"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
 /user/count:
     get:
      operationId: 'countUsers'
      description: 'Returns quantity of Users'
      produces:
         - "application/json"
      tags:
         - "user"
      responses:
       "200":
        description: 'Returns quantity of Users'
        schema:
         $ref: '#/definitions/Count'
       default:
        description: 'Unexpected error'
        schema:
         $ref: '#/definitions/Error'

 /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Create User."
      operationId: "addUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

definitions:
  User:
    type: "object"
    properties:
       _id:
         type: "string"
       name:
         type: "string"
       email:
         type: "string"
       password:
         type: "string"
  Error:
    type: object
    properties:
      code:
       type: integer
       format: int32
      message:
       type: string
      fields:
       type: string
  Count:
    type: object
    properties:
      count:
       type: integer
       format: int64
